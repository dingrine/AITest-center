/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-08-04T18:44:43+08:00
** Author: CrazyThursdayV50
 */

package models

import (
	"fmt"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var schema = "schema"

func Schema() string {
	return schema
}

func SetSchema(val string) {
	if val == "" {
		return
	}

	schema = val
}

type tabler interface {
	TableName() string
}

func DefaultFindInBatchesCallback(f func()) func(db *gorm.DB, batch int) error {
	return func(db *gorm.DB, batch int) error {
		f()
		return db.Error
	}
}

type Column[T any] string

func (c Column[T]) String() string {
	return "`" + string(c) + "`"
}

func (c Column[T]) Equal(value T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s=?", c), value)
	}
}

func (c Column[T]) In(value []T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s IN ?", c), value)
	}
}

func (c Column[T]) IsNull() func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s IS NULL", c))
	}
}

func (c Column[T]) Max() func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Select(fmt.Sprintf("MAX(%[1]s) AS %[1]s", c))
	}
}

func (c Column[T]) OrderAsc() func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Order(clause.OrderByColumn{
			Column: clause.Column{
				Name: c.String(),
			},
			Desc: false,
		})
	}
}

func (c Column[T]) OrderDesc() func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Order(clause.OrderByColumn{
			Column: clause.Column{
				Name: c.String(),
			},
			Desc: true,
		})
	}
}

func (c Column[T]) LessThan(value T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s<?", c), value)
	}
}

func (c Column[T]) LessEqual(value T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s<=?", c), value)
	}
}

func (c Column[T]) GreaterThan(value T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s>?", c), value)
	}
}

func (c Column[T]) GreaterEqual(value T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s>=?", c), value)
	}
}

func (c Column[T]) Between(a, b T) func(*gorm.DB) *gorm.DB {
	return func(d *gorm.DB) *gorm.DB {
		return d.Where(fmt.Sprintf("%s BETWEEN ? and ?", c), a, b)
	}
}
