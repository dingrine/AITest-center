package models

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-08-04T15:33:07+08:00
** Author: CrazyThursdayV50
 */

type ExamResultDetail struct {
	Id                        *int64     `gorm:"column:id;type:BIGINT;primaryKey;autoIncrement" json:"id"`
	ExamId                    int64      `gorm:"column:exam_id;type:BIGINT;not null" json:"exam_id"`
	TotalScore                *int64     `gorm:"column:total_score;type:TINYINT" json:"total_score"`
	FinancialKnowledgeScore   *int64     `gorm:"column:financial_knowledge_score;type:TINYINT" json:"financial_knowledge_score"`
	RegulatoryComplianceScore *int64     `gorm:"column:regulatory_compliance_score;type:TINYINT" json:"regulatory_compliance_score"`
	RiskManagementScore       *int64     `gorm:"column:risk_management_score;type:TINYINT" json:"risk_management_score"`
	TradeConductScore         *int64     `gorm:"column:trade_conduct_score;type:TINYINT" json:"trade_conduct_score"`
	InvestorEthicsScore       *int64     `gorm:"column:investor_ethics_score;type:TINYINT" json:"investor_ethics_score"`
	IsPassed                  *bool      `gorm:"column:is_passed;type:BOOLEAN" json:"is_passed"`
	TotalQuestions            *int64     `gorm:"column:total_questions;type:INT" json:"total_questions"`
	CorrectAnswers            *int64     `gorm:"column:correct_answers;type:INT" json:"correct_answers"`
	IncorrectAnswers          *int64     `gorm:"column:incorrect_answers;type:INT" json:"incorrect_answers"`
	PassedAt                  *time.Time `gorm:"column:passed_at;type:DATETIME" json:"passed_at"`
	CreatedAt                 time.Time  `gorm:"column:created_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP COMMENT " json:"created_at"`
	UpdatedAt                 time.Time  `gorm:"column:updated_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT " json:"updated_at"`
}

func exam_result_detail_id() Column[*int64] {
	return "id"
}

func (s *ExamResultDetail) ColumnId() Column[*int64] {
	return exam_result_detail_id()
}

func exam_result_detail_exam_id() Column[int64] {
	return "exam_id"
}

func (s *ExamResultDetail) ColumnExamId() Column[int64] {
	return exam_result_detail_exam_id()
}

func exam_result_detail_total_score() Column[*int64] {
	return "total_score"
}

func (s *ExamResultDetail) ColumnTotalScore() Column[*int64] {
	return exam_result_detail_total_score()
}

func exam_result_detail_financial_knowledge_score() Column[*int64] {
	return "financial_knowledge_score"
}

func (s *ExamResultDetail) ColumnFinancialKnowledgeScore() Column[*int64] {
	return exam_result_detail_financial_knowledge_score()
}

func exam_result_detail_regulatory_compliance_score() Column[*int64] {
	return "regulatory_compliance_score"
}

func (s *ExamResultDetail) ColumnRegulatoryComplianceScore() Column[*int64] {
	return exam_result_detail_regulatory_compliance_score()
}

func exam_result_detail_risk_management_score() Column[*int64] {
	return "risk_management_score"
}

func (s *ExamResultDetail) ColumnRiskManagementScore() Column[*int64] {
	return exam_result_detail_risk_management_score()
}

func exam_result_detail_trade_conduct_score() Column[*int64] {
	return "trade_conduct_score"
}

func (s *ExamResultDetail) ColumnTradeConductScore() Column[*int64] {
	return exam_result_detail_trade_conduct_score()
}

func exam_result_detail_investor_ethics_score() Column[*int64] {
	return "investor_ethics_score"
}

func (s *ExamResultDetail) ColumnInvestorEthicsScore() Column[*int64] {
	return exam_result_detail_investor_ethics_score()
}

func exam_result_detail_is_passed() Column[*bool] {
	return "is_passed"
}

func (s *ExamResultDetail) ColumnIsPassed() Column[*bool] {
	return exam_result_detail_is_passed()
}

func exam_result_detail_total_questions() Column[*int64] {
	return "total_questions"
}

func (s *ExamResultDetail) ColumnTotalQuestions() Column[*int64] {
	return exam_result_detail_total_questions()
}

func exam_result_detail_correct_answers() Column[*int64] {
	return "correct_answers"
}

func (s *ExamResultDetail) ColumnCorrectAnswers() Column[*int64] {
	return exam_result_detail_correct_answers()
}

func exam_result_detail_incorrect_answers() Column[*int64] {
	return "incorrect_answers"
}

func (s *ExamResultDetail) ColumnIncorrectAnswers() Column[*int64] {
	return exam_result_detail_incorrect_answers()
}

func exam_result_detail_passed_at() Column[*time.Time] {
	return "passed_at"
}

func (s *ExamResultDetail) ColumnPassedAt() Column[*time.Time] {
	return exam_result_detail_passed_at()
}

func exam_result_detail_created_at() Column[time.Time] {
	return "created_at"
}

func (s *ExamResultDetail) ColumnCreatedAt() Column[time.Time] {
	return exam_result_detail_created_at()
}

func exam_result_detail_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *ExamResultDetail) ColumnUpdatedAt() Column[time.Time] {
	return exam_result_detail_updated_at()
}

func (t *ExamResultDetail) TableName() string {
	return Schema() + ".exam_result_detail"
}
