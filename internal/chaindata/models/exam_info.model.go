package models

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-08-04T18:44:43+08:00
** Author: CrazyThursdayV50
 */

type ExamInfo struct {
	Id                  int64      `gorm:"column:id;type:INT;primaryKey;not null;autoIncrement" json:"id"`
	DetraderId          int64      `gorm:"column:detrader_id;type:INT;not null" json:"detrader_id"`
	DetraderName        string     `gorm:"column:detrader_name;type:VARCHAR(100);size:100;not null" json:"detrader_name"`
	EvaluationSystem    int64      `gorm:"column:evaluation_system;type:TINYINT;not null" json:"evaluation_system"`
	RegionCertType      int64      `gorm:"column:region_cert_type;type:TINYINT;not null" json:"region_cert_type"`
	ExamCount           int64      `gorm:"column:exam_count;type:INT;not null;default:0" json:"exam_count"`
	PassedCount         int64      `gorm:"column:passed_count;type:INT;not null;default:0" json:"passed_count"`
	LatestExamName      string     `gorm:"column:latest_exam_name;type:VARCHAR(100);size:100;not null" json:"latest_exam_name"`
	LatestExamStatus    int64      `gorm:"column:latest_exam_status;type:TINYINT;not null;default:0" json:"latest_exam_status"`
	LatestCertifiedAt   *time.Time `gorm:"column:latest_certified_at;type:DATETIME" json:"latest_certified_at"`
	CertificationStatus int64      `gorm:"column:certification_status;type:TINYINT;not null;default:0" json:"certification_status"`
	CreatedAt           time.Time  `gorm:"column:created_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt           time.Time  `gorm:"column:updated_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" json:"updated_at"`
}

func exam_info_id() Column[int64] {
	return "id"
}

func (s *ExamInfo) ColumnId() Column[int64] {
	return exam_info_id()
}

func exam_info_detrader_id() Column[int64] {
	return "detrader_id"
}

func (s *ExamInfo) ColumnDetraderId() Column[int64] {
	return exam_info_detrader_id()
}

func exam_info_detrader_name() Column[string] {
	return "detrader_name"
}

func (s *ExamInfo) ColumnDetraderName() Column[string] {
	return exam_info_detrader_name()
}

func exam_info_evaluation_system() Column[int64] {
	return "evaluation_system"
}

func (s *ExamInfo) ColumnEvaluationSystem() Column[int64] {
	return exam_info_evaluation_system()
}

func exam_info_region_cert_type() Column[int64] {
	return "region_cert_type"
}

func (s *ExamInfo) ColumnRegionCertType() Column[int64] {
	return exam_info_region_cert_type()
}

func exam_info_exam_count() Column[int64] {
	return "exam_count"
}

func (s *ExamInfo) ColumnExamCount() Column[int64] {
	return exam_info_exam_count()
}

func exam_info_passed_count() Column[int64] {
	return "passed_count"
}

func (s *ExamInfo) ColumnPassedCount() Column[int64] {
	return exam_info_passed_count()
}

func exam_info_latest_exam_name() Column[string] {
	return "latest_exam_name"
}

func (s *ExamInfo) ColumnLatestExamName() Column[string] {
	return exam_info_latest_exam_name()
}

func exam_info_latest_exam_status() Column[int64] {
	return "latest_exam_status"
}

func (s *ExamInfo) ColumnLatestExamStatus() Column[int64] {
	return exam_info_latest_exam_status()
}

func exam_info_latest_certified_at() Column[*time.Time] {
	return "latest_certified_at"
}

func (s *ExamInfo) ColumnLatestCertifiedAt() Column[*time.Time] {
	return exam_info_latest_certified_at()
}

func exam_info_certification_status() Column[int64] {
	return "certification_status"
}

func (s *ExamInfo) ColumnCertificationStatus() Column[int64] {
	return exam_info_certification_status()
}

func exam_info_created_at() Column[time.Time] {
	return "created_at"
}

func (s *ExamInfo) ColumnCreatedAt() Column[time.Time] {
	return exam_info_created_at()
}

func exam_info_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *ExamInfo) ColumnUpdatedAt() Column[time.Time] {
	return exam_info_updated_at()
}

func (t *ExamInfo) TableName() string {
	return Schema() + ".exam_info"
}
